using System;

public class Wektor
{
    private double[] współrzędne;

    public Wektor(byte wymiar)
    {
        współrzędne = new double[wymiar];
    }

    public Wektor(params double[] współrzędne)
    {
        this.współrzędne = współrzędne;
    }

    public double this[byte indeks]
    {
        get { return współrzędne[indeks]; }
        set { współrzędne[indeks] = value; }
    }

    public double Długość
    {
        get { return Math.Sqrt(IloczynSkalarny(this, this)); }
    }

    public byte Wymiar
    {
        get { return (byte)współrzędne.Length; }
    }

    public static double? IloczynSkalarny(Wektor V, Wektor W)
    {
        if (V.Wymiar != W.Wymiar)
            return null;

        double iloczyn = 0;
        for (int i = 0; i < V.Wymiar; i++)
        {
            iloczyn += V[i] * W[i];
        }

        return iloczyn;
    }

    public static Wektor Suma(params Wektor[] Wektory)
    {
        if (Wektory.Length == 0)
            throw new ArgumentException("Nie podano żadnego wektora.");

        byte wymiar = Wektory[0].Wymiar;
        foreach (var wektor in Wektory)
        {
            if (wektor.Wymiar != wymiar)
                throw new ArgumentException("Wektory muszą mieć ten sam wymiar.");
        }

        Wektor suma = new Wektor(wymiar);
        for (int i = 0; i < wymiar; i++)
        {
            for (int j = 0; j < Wektory.Length; j++)
            {
                suma[i] += Wektory[j][i];
            }
        }

        return suma;
    }

    public static Wektor operator +(Wektor V, Wektor W)
    {
        if (V.Wymiar != W.Wymiar)
            throw new ArgumentException("Wektory muszą mieć ten sam wymiar.");

        Wektor suma = new Wektor(V.Wymiar);
        for (int i = 0; i < V.Wymiar; i++)
        {
            suma[i] = V[i] + W[i];
        }

        return suma;
    }

    public static Wektor operator -(Wektor V, Wektor W)
    {
        if (V.Wymiar != W.Wymiar)
            throw new ArgumentException("Wektory muszą mieć ten sam wymiar.");

        Wektor różnica = new Wektor(V.Wymiar);
        for (int i = 0; i < V.Wymiar; i++)
        {
            różnica[i] = V[i] - W[i];
        }

        return różnica;
    }

    public static Wektor operator *(Wektor V, double skalar)
    {
        Wektor iloczyn = new Wektor(V.Wymiar);
        for (int i = 0; i < V.Wymiar; i++)
        {
            iloczyn[i] = V[i] * skalar;
        }

        return iloczyn;
    }

    public static Wektor operator *(double skalar, Wektor V)
    {
        return V * skalar;
    }

    public static Wektor operator /(Wektor V, double skalar)
    {
        if (skalar == 0)
            throw new ArgumentException("Dzielenie przez zero.");

        Wektor iloraz = new Wektor(V.Wymiar);
        for (int i = 0; i < V.Wymiar; i++)
        {
            iloraz[i] = V[i] / skalar;
        }

        return iloraz;
    }
}

// Przykładowe użycie klasy Wektor:
Wektor v = new Wektor(1, 2, 3);
Wektor w = new Wektor(4, 5, 6);

Wektor suma = Wektor.Suma(v, w);
double iloczynSkalarny = Wektor.IloczynSkalarny(v, w);
double długość = v.Długość;
byte wymiar = v.Wymiar;

Console.WriteLine("Suma: " + string.Join(", ", suma));
Console.WriteLine("Iloczyn skalarny: " + iloczynSkalarny);
Console.WriteLine("Długość: " + długość);
Console.WriteLine("Wymiar: " + wymiar);
