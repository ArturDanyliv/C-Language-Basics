// Napisać program wczytujący ciąg n (1<=n<=1000) liczb całkowitych (dodatnich i ujemnych) i wypisujący wczytane liczby na ekranie.
// Rozwiązanie zadania 1 wersja I:
int[] tab = new int[1000]; // tablica 1000 liczb typu int
int i, n; // i-licznik petli, n-ilosc elementow tablicy
// wczytuje n
Console.Write("Podaj ilosc elementow tablicy n<=1000: ");
n=Convert.ToInt32(Console.ReadLine());
// wczytuje n elementow do tablicy 
for (i = 0; i < n; i++)
{
    Console.Write("Podaj tab [ {0} ]=", i);
    tab [i] = Convert.ToInt32(Console.ReadLine());
}
// Wyswietlam elementy tablicy na ekranie 
Console.Write("Elementy tablicy: ");
for (i = 0; i < n; i++)
{
    Console.Write("{0}, ", tab[i]);
}
Console.ReadKey(true); // pauza

// WERSJA 2 
int[] tab; // tablica liczb typu int
int i, n;  // n-ilosc elementow tablicy
// wczytuje n (l <= n <= 1000)
do 
{
    Console.Write("Podaj ilosc elementow tablicy l<= n <= 1000: ");
    n = Convert.ToInt32(Console.ReadLine());
}  while ( n <= 0 || n > 1000);
// tablica tab bedzie miec n-elementow 
tab = new int[n];
// wczytuje n elementow do tablicy tab
for (i = 0; i < n; i++);
{
    Console.Write("Podaj tab [{0}]= ", i);
    tab[i] = Convert.TiInt32(Console.ReadLine());
}
// wyswietlam elementy tablicy na ekranie 
Console.Write("Elementy tablicy: ");
foreach(int elem in tab) Console.Write("{0}, ", elem);
Console.ReadKey(true) // pauza 

// 2. Napisać program wczytujący ciąg n (1<=n
// Pytanie: Która wersja rozwiązania zadania 1 jest lepsza i dlaczego? <=1000) liczb całkowitych i wypisujący wczytane liczby w odwrotnej kolejności na ekranie.
int [] tab = new int[1000]; // tablica 1000 liczb typu int 
int i; n; // i-licznik petli, n-ilosc elementow tablicy 
// wczytuje n 
Cosole.Write("Podaj ilosc elementow tablicy n <= 1000: ");
n = Convert.ToInt32(Console.ReadLine());
// wczytuje nelementow do tablicy 
for (i = 0; i < n; i++)
{
    Console.Write("Podaj tab [{0}]= ", i);
    tab[i] = Convert.ToInt32(Console.ReadKey());
}
// wyswietlam elementy tablicy na ekranie 
Cosnole.Write("Elementy tablicy: ");
for (i = n-1; i >= 0; i--)
{
    Console.Write("{0}, ", tab[i]);
}
Console.ReadKey(true) // pauza

// 3 Napisać program wczytujący ciąg n (1<=n
// <=1000) liczb całkowitych, sortujący je niemalejąco i wypisujący posortowane liczby na ekranie.
int i, j; // i, j-licznik petli 
int n, tmp; //n-ilosc elementow tablicy , tmp-zmienna pomocnicza 
// wczytuje n
Console.Write("Podaj ilosc elementow tablicy (l <= n <= 1000): ");
n = Convert.ToInt32(Console.ReadLine());
int [] tab = new int[n]; // deklaruje tablice n-elem liczb typu int 
// wczytuje n elementow do tablicy tab 
for (i = 0; i < n; i++)
{
    Console.Write("Podaj tab [{0}]= ", i);
    tab[i] = Convert.ToInt32(Console.ReadLine());
}
// sortujemy elementy tablicy tab 
for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
        if (tab[i] < tab[j]) // zmiana kolejnosci elem tab
        { tmp = tab[i]; tab[i] = tab[j]; tab[j] = tmp; }
// wyswietlam elementy tablicy na ekranie 
Console.Write("Elementy tablicy: ");
foreach (int elem in tab) Console.Write("{0}, ", elem);
Console.ReadKey(true); // pauza 

// 4 4. Napisać program wczytujący ciąg n (1<=n
// <=1000) liczb całkowitych i wypisujący na ekranie
// sumę wczytanych liczb.
int [] tab = new int[1000]; // tablica 1000 liczb typu int 
int i; // i - licznik petli ,
int n, suma; // n - ilosc elementow tablicy , suma-suma elem tab 
// wczytuje n 
Console,Write("Podaj ilosc elementow tablicy n <= 1000: ");
n = Convert.ToInt32(Console.ReadLine());
// wczytuje n elementow do tablicy
for (i = 0; i < n; i++)
{
    Console.Write("Podaj tab[{0}]= ", i);
    tab[i] = Convert.ToInt32(Console.ReadLine());
}
// obliczamy sume wczytanych elementow 
suma = 0;
for (i = 0; i < n; i++) suma += tab[i];
// wypisujemy wynik
Cosnole.WriteLine("Suma elementow tablicy wynosi {0}.", suma);
Console.ReadKey(true); // pauza 

// Wczytaj liczbę naturalną dodatnią n i wypisz na ekranie tą liczbę w systemie dwójkowym.
int[] tab = new int[1000]; // tablica 1000 liczb typu int
int i = 0, j, liczba;
do // wczytuje liczbe naturalna dodatnia
{
    Console.Write("Podaj liczbe naturalna dodatnia: ");
    liczba = Convert.ToInt32(Console.ReadLine());
} while (liczba <= 0);
// zapisuje do tablicy tab reszty z dzielenia przez 2
while (liczba != 0)
{
    tab[i++] = liczba % 2;
    liczba /= 2;
}
// wypisujemy elementy tablicy w odwrotnej kolejnosci 
Console.Write ("Liczba zapisana  w systemie dwojkowym: ");
for (j = i - 1; j >= 0; j--) Console.Write(tab[j]);
Console.ReadKey(true); // pauza 

// 6 Zadeklaruj tablicę zawierającą nazwy dni tygodnia i zainicjuj ją nazwami dni tygodnia.
// Wypisz elementy tablicy za pomocą pętli foreach.
string [] dni = new string[] {"poniedzialek",
    "wtorek", "sroda", "czwartek", "piatek",
    "sobota", "niedziela"};
// wpisujemy elementy tablicy 
foreach (string elem in dni)
    Console.Write("{0},", elem);
Console.ReadKey(true); // pauza

// 7 Poproś użytkownika o podanie rozmiaru tablicy jednowymiarowej (n>0). Zadeklaruj tablicę liczb całkowitych o zadanym rozmiarze i wypełnij ją liczbami pseudolosowymi z przedziału [0 ,100]. Wypisz na ekranie wszystkie elementy tablicy większe od 50. Użyj pętli foreach.
int n, i;
Console.Write("Podaj n (n>0): ");
// wczytuje n
n = Convert.ToInt32(Console.ReadLine());
int[] tab = new int[n];  // deklaruje tablice n-elem.
Random r = new Random(); // tworze obiekt klasy Random
// wypelniam tablice tab liczbami pseudolosowymi
for (i = 0; i < n; i++)
    tab[i] = r.Next(0, 101); // losujemy liczbe z przedzialu [0,100]
// wypisuje elementy tablicy na ekranie
foreach (int elem in tab)
    if (elem > 50 ) Console.Write(elem + ", ");
Console.ReadKey(true); // pauza 